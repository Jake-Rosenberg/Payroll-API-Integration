// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MSSQLContext))]
    [Migration("20240513191337_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AD.ADProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastPasswordChange")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payroll")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AD_Employees");
                });

            modelBuilder.Entity("Domain.Entities.UKG.D_LatePaycodeEdits", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoursLate")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PunchIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("PersonId");

                    b.ToTable("UKG_D_LatePunches");
                });

            modelBuilder.Entity("Domain.Entities.UKG.Employee", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayRuleOrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payroll")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("UKG_Employees");
                });

            modelBuilder.Entity("Domain.Entities.UKG.HoursWorked", b =>
                {
                    b.Property<int>("HoursWorkedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HoursWorkedId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<double>("TotalHoursWorked")
                        .HasColumnType("float");

                    b.HasKey("HoursWorkedId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("UKG_HoursWorked");
                });

            modelBuilder.Entity("Domain.Entities.UKG.PaycodeEdit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ApplyDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Paycode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("UKG_PaycodeEdits");
                });

            modelBuilder.Entity("Domain.Entities.UKG.ScheduleShift", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("UKG_ScheduleShifts");
                });

            modelBuilder.Entity("Domain.Entities.UKG.WorkedShift", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("HoursLate")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PunchIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PunchOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduledShiftId")
                        .HasColumnType("int");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ScheduledShiftId")
                        .IsUnique()
                        .HasFilter("[ScheduledShiftId] IS NOT NULL");

                    b.ToTable("UKG_WorkedShifts");
                });

            modelBuilder.Entity("Domain.Entities.UKG.D_LatePaycodeEdits", b =>
                {
                    b.HasOne("Domain.Entities.UKG.Employee", "Employee")
                        .WithMany("D_Lates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.UKG.HoursWorked", b =>
                {
                    b.HasOne("Domain.Entities.UKG.Employee", "Employee")
                        .WithOne("HoursWorked")
                        .HasForeignKey("Domain.Entities.UKG.HoursWorked", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.UKG.PaycodeEdit", b =>
                {
                    b.HasOne("Domain.Entities.UKG.Employee", "Employee")
                        .WithMany("PaycodeEdit")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.UKG.ScheduleShift", b =>
                {
                    b.HasOne("Domain.Entities.UKG.Employee", "Employee")
                        .WithMany("ScheduleShift")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.UKG.WorkedShift", b =>
                {
                    b.HasOne("Domain.Entities.UKG.Employee", "Employee")
                        .WithMany("WorkedShift")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UKG.ScheduleShift", "ScheduleShift")
                        .WithOne("WorkedShift")
                        .HasForeignKey("Domain.Entities.UKG.WorkedShift", "ScheduledShiftId");

                    b.Navigation("Employee");

                    b.Navigation("ScheduleShift");
                });

            modelBuilder.Entity("Domain.Entities.UKG.Employee", b =>
                {
                    b.Navigation("D_Lates");

                    b.Navigation("HoursWorked");

                    b.Navigation("PaycodeEdit");

                    b.Navigation("ScheduleShift");

                    b.Navigation("WorkedShift");
                });

            modelBuilder.Entity("Domain.Entities.UKG.ScheduleShift", b =>
                {
                    b.Navigation("WorkedShift");
                });
#pragma warning restore 612, 618
        }
    }
}
